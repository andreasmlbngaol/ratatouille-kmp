name: Build and Deploy Ratatouille Server

on:
  push:
    branches:
      - development
      - master
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.POSTGRES_USER }}
      DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_NAME_DEV: ${{ secrets.POSTGRES_DB_DEV }}
      DB_NAME_PROD: ${{ secrets.POSTGRES_DB_PROD }}
      DOMAIN_DEV: ${{ secrets.DOMAIN_DEV }}
      DOMAIN_PROD: ${{ secrets.DOMAIN_PROD }}
      JWT_SECRET_DEV: ${{ secrets.JWT_SECRET_DEV }}
      JWT_SECRET_PROD: ${{ secrets.JWT_SECRET_PROD }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v5

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/ratatouille:${{ github.ref_name == 'master' && 'prod' || 'dev' }}
          build-args: |
            DB_USER=${{ env.DB_USER }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            DB_NAME=${{ github.ref_name == 'master' && env.DB_NAME_PROD || env.DB_NAME_DEV }}
            DOMAIN=${{ github.ref_name == 'master' && env.DOMAIN_PROD || env.DOMAIN_DEV }}
            JWT_SECRET=${{ github.ref_name == 'master' && env.JWT_SECRET_PROD || env.JWT_SECRET_DEV }}

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH into VPS and pull new image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            BRANCH=${{ github.ref_name }}
            if [ "$BRANCH" = "master" ]; then
              IMAGE_TAG="prod"
              PORT="2046:8080"
              DB_NAME="${{ secrets.POSTGRES_DB_PROD }}"
              DOMAIN="${{ secrets.DOMAIN_PROD }}"
              JWT_SECRET="${{ secrets.JWT_SECRET_PROD }}"
            else
              IMAGE_TAG="dev"
              PORT="2045:8080"
              DB_NAME="${{ secrets.POSTGRES_DB_DEV }}"
              DOMAIN="${{ secrets.DOMAIN_DEV }}"
              JWT_SECRET="${{ secrets.JWT_SECRET_DEV }}"
            fi

            echo "Deploying Ratatouille - $IMAGE_TAG environment..."

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ratatouille:$IMAGE_TAG
            docker stop ratatouille-$IMAGE_TAG || true
            docker rm ratatouille-$IMAGE_TAG || true

            docker run -d \
              --name ratatouille-$IMAGE_TAG \
              -p "${PORT}" \
              --restart unless-stopped \
              -v /root/credentials/ratatouille/serviceAccountKey.json:/app/serviceAccountKey.json:ro \
              -e DB_DRIVER="org.postgresql.Driver" \
              -e DB_URL="jdbc:postgresql://137.184.251.185:5432/$DB_NAME" \
              -e DB_USER="${{ secrets.POSTGRES_USER }}" \
              -e DB_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
              -e DB_NAME="$DB_NAME" \
              -e DOMAIN="$DOMAIN" \
              -e JWT_SECRET="$JWT_SECRET" \
              ${{ secrets.DOCKERHUB_USERNAME }}/ratatouille:$IMAGE_TAG
            
            echo "Cleaning up unused Docker images..."
            docker image prune -f
            
            echo "Deployment of Ratatouille - $IMAGE_TAG environment completed."